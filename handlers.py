import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from config import Config, CATEGORIES, MESSAGES
from database import db
from keyboards import (
    get_main_menu_keyboard, 
    get_category_keyboard, 
    get_service_keyboard,
    get_details_keyboard,
    get_back_to_main_keyboard,
    get_contact_keyboard
)
from utils import get_category_by_name, format_service_message, format_detailed_service_message

logger = logging.getLogger(__name__)
router = Router()

def safe_callback_answer(callback):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback"""
    try:
        return callback.answer()
    except Exception:
        pass

def register_user_handlers(dp, config: Config):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if user:
            await db.log_user_action(
                user.id, 
                user.username or "unknown", 
                "start_command"
            )
        
        await message.answer(
            MESSAGES["welcome"],
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    @dp.callback_query(F.data == "main_menu")
    async def show_main_menu(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = callback.from_user
        
        if user:
            await db.log_user_action(
                user.id,
                user.username or "unknown",
                "main_menu_accessed"
            )
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    MESSAGES["welcome"],
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
        except TelegramBadRequest:
            if callback.message:
                await callback.message.answer(
                    MESSAGES["welcome"],
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
        
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("category_"))
    async def show_category(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user = callback.from_user
        if not callback.data:
            return
            
        category_key = callback.data.split("_")[1]
        
        if category_key not in CATEGORIES:
            await safe_callback_answer(callback)
            return
        
        category_name = CATEGORIES[category_key]
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if user:
            await db.log_user_action(
                user.id,
                user.username or "unknown",
                "category_viewed",
                category_name
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category_key == "about":
            about_text = """üßæ **–û –Ω–∞—Å**

Phoenix PS - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Windows –∏ —Ä–∞–∑–≥–æ–Ω—É –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤.

üî• **–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

üí™ **–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º:**
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ü–ö
‚Ä¢ –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ª–∞–≥–æ–≤ –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
‚Ä¢ –†–∞–∑–æ–≥–Ω–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ"""

            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    about_text,
                    reply_markup=get_back_to_main_keyboard(),
                    parse_mode="Markdown"
                )
            await safe_callback_answer(callback)
            return
        
        elif category_key == "contacts":
            contacts_text = """üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∑–∞–∫–∞–∑**

üì± **–ö–∞–Ω–∞–ª:** @helprepairpc
üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 21:00 (–ú–°–ö)

üìã **–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é
2. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å"
3. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
4. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π

üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –°–ë–ü
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"""

            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    contacts_text,
                    reply_markup=get_contact_keyboard(),
                    parse_mode="Markdown"
                )
            await safe_callback_answer(callback)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        services = await db.get_services_by_category(category_name)
        
        if not services:
            no_services_text = f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category_name}** –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    no_services_text,
                    reply_markup=get_back_to_main_keyboard(),
                    parse_mode="Markdown"
                )
        else:
            services_text = f"üìã **{category_name}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:"
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    services_text,
                    reply_markup=get_category_keyboard(category_key, services),
                    parse_mode="Markdown"
                )
        
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("service_"))
    async def show_service(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
        user = callback.from_user
        if not callback.data:
            return
            
        service_id = int(callback.data.split("_")[1])
        
        service = await db.get_service_by_id(service_id)
        if not service:
            await safe_callback_answer(callback)
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if user:
            await db.log_user_action(
                user.id,
                user.username or "unknown",
                "service_viewed",
                service['name']
            )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        category_key = get_category_by_name(service['category'])
        
        service_text = format_service_message(service)
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                service_text,
                reply_markup=get_service_keyboard(service_id, category_key),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("details_"))
    async def show_service_details(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
        user = callback.from_user
        if not callback.data:
            return
            
        service_id = int(callback.data.split("_")[1])
        
        service = await db.get_service_by_id(service_id)
        if not service:
            await safe_callback_answer(callback)
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if user:
            await db.log_user_action(
                user.id,
                user.username or "unknown",
                "service_details_viewed",
                service['name']
            )
        
        category_key = get_category_by_name(service['category'])
        detailed_text = format_detailed_service_message(service)
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                detailed_text,
                reply_markup=get_details_keyboard(service_id, category_key),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("order_"))
    async def process_order(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞"""
        user = callback.from_user
        if not callback.data or not user:
            return
            
        service_id = int(callback.data.split("_")[1])
        
        service = await db.get_service_by_id(service_id)
        if not service:
            await safe_callback_answer(callback)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
        if not config.CHANNEL_ID:
            await safe_callback_answer(callback)
            return
        
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É
            await db.add_order(user.id, user.username or "unknown", service_id, service['name'])
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await db.log_user_action(
                user.id,
                user.username or "unknown",
                "order_created",
                f"Service: {service['name']}, Price: {service['price']}"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_message = MESSAGES["order_success"].format(service_name=service['name'])
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    client_message,
                    reply_markup=get_back_to_main_keyboard(),
                    parse_mode="Markdown"
                )
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ callback
                bot = callback.bot
                
                order_message = MESSAGES["manager_notification"].format(
                    service_name=service['name'],
                    username=user.username or "unknown",
                    time=datetime.now().strftime("%d.%m.%Y %H:%M"),
                    price=service['price'],
                    description=service['description']
                )
                
                # –ü—É–±–ª–∏–∫—É–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª
                if config.CHANNEL_ID:
                    try:
                        await bot.send_message(config.CHANNEL_ID, order_message, parse_mode="Markdown")
                        logger.info(f"–ó–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}")
                    except Exception as channel_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}: {channel_error}")
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                        if config.ADMIN_ID:
                            error_msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –æ—Ç @{user.username or 'unknown'} –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞."
                            try:
                                await bot.send_message(config.ADMIN_ID, error_msg)
                            except Exception as admin_error:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {admin_error}")
                else:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    if config.ADMIN_ID:
                        error_msg = f"‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞—è–≤–∫–∞ –æ—Ç @{user.username or 'unknown'} –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."
                        try:
                            await bot.send_message(config.ADMIN_ID, error_msg)
                        except Exception as admin_error:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {admin_error}")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_main_keyboard()
                )
        
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "back_to_main")
    async def back_to_main(callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await show_main_menu(callback)
    
