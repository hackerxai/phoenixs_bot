import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from config import Config, CATEGORIES
from database import db
from keyboards import get_channel_post_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
admin_states = {}

def safe_callback_answer(callback):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback"""
    try:
        return callback.answer()
    except Exception:
        pass

def register_admin_handlers(dp, config: Config):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == config.ADMIN_ID
    
    @dp.message(Command("admin"))
    async def cmd_admin(message: Message):
        """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_services"))
        keyboard.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_add_service"))
        keyboard.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
        keyboard.row(InlineKeyboardButton(text="üìù –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", callback_data="admin_post"))
        keyboard.row(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        keyboard.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close"))
        
        admin_text = f"""üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Phoenix PS Bot**

‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {config.CHANNEL_ID or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await message.answer(
            admin_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    @dp.callback_query(F.data == "admin_services")
    async def show_services_menu(callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        services_count = len(await db.get_all_services())
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥", callback_data="admin_list"))
        keyboard.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_delete_service"))
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        
        services_text = f"""üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏**

üìä –í—Å–µ–≥–æ —É—Å–ª—É–≥: {services_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                services_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_add_service")
    async def start_add_service(callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        admin_states[user.id] = "waiting_category"
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for key, name in CATEGORIES.items():
            if key not in ['about', 'contacts']:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                keyboard.row(InlineKeyboardButton(text=name, callback_data=f"add_cat_{key}"))
        
        keyboard.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_menu"))
        
        add_text = """‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏**

üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                add_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("add_cat_"))
    async def select_category_for_add(callback: CallbackQuery):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        category_key = callback.data.split("_")[2]
        category_name = CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        admin_states[user.id] = f"waiting_name_{category_key}"
        
        await callback.message.answer(
            f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '‚ö° –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows'):",
            parse_mode="Markdown"
        )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_delete_service")
    async def start_delete_service(callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        services = await db.get_all_services()
        
        if not services:
            await callback.message.answer("üì≠ –£—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for service in services[:10]:
            service_name = service['name'][:30] + "..." if len(service['name']) > 30 else service['name']
            keyboard.row(InlineKeyboardButton(
                text=f"üóëÔ∏è {service_name}",
                callback_data=f"del_service_{service['id']}"
            ))
        
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_services"))
        
        delete_text = f"""üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏**

üìã –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞–∑–∞–Ω–æ {min(len(services), 10)} –∏–∑ {len(services)}):"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                delete_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("del_service_"))
    async def confirm_delete_service(callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        service_id = int(callback.data.split("_")[2])
        service = await db.get_service_by_id(service_id)
        
        if not service:
            await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{service_id}"))
        keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_service"))
        
        confirm_text = f"""üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**

üìã –£—Å–ª—É–≥–∞: {service['name']}
üí∞ –¶–µ–Ω–∞: {service['price']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['category']}

‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                confirm_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data.startswith("confirm_del_"))
    async def delete_service_confirmed(callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        service_id = int(callback.data.split("_")[2])
        service = await db.get_service_by_id(service_id)
        
        if not service:
            await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await safe_callback_answer(callback)
            return
        
        success = await db.delete_service(service_id)
        
        if success:
            await callback.message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ '{service['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
        
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_settings")
    async def show_settings(callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üì¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫", callback_data="admin_set_channel"))
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

üì¢ **–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫:** {config.CHANNEL_ID or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                settings_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_set_manager")
    async def set_manager_ui(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ UI"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        admin_states[user.id] = "waiting_manager"
        
        await callback.message.answer(
            "üë§ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: phoen1xPC):",
            parse_mode="Markdown"
        )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_set_channel")
    async def set_channel_ui(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ UI"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        admin_states[user.id] = "waiting_channel"
        
        await callback.message.answer(
            "üì¢ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @helprepairpc –∏–ª–∏ -1001234567890):",
            parse_mode="Markdown"
        )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_list")
    async def list_services(callback: CallbackQuery):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        services = await db.get_all_services()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_services"))
        
        if not services:
            list_text = """üì≠ **–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
/add_service –∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞"""
        else:
            list_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥:**\n\n"
            
            for service in services:
                list_text += f"üîπ **ID {service['id']}**: {service['name']}\n"
                list_text += f"   üí∞ {service['price']} | üìÇ {service['category']}\n\n"
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                list_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_stats")
    async def show_stats(callback: CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        services_count = len(await db.get_all_services())
        orders_count = len(await db.get_all_orders())
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üì¶ **–£—Å–ª—É–≥–∏:** {services_count}
üìã **–ó–∞–∫–∞–∑—ã:** {orders_count}
üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime("%d.%m.%Y %H:%M")}

üìà **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category_key, category_name in CATEGORIES.items():
            if category_key not in ['about', 'contacts']:
                cat_services = await db.get_services_by_category(category_name)
                stats_text += f"\n‚Ä¢ {category_name}: {len(cat_services)} —É—Å–ª—É–≥"
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                stats_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_post")
    async def request_post(callback: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        if not config.CHANNEL_ID:
            await callback.message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel")
            await safe_callback_answer(callback)
            return
        
        admin_states[user.id] = "waiting_post"
        
        await callback.message.answer(
            f"üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}:**\n\n–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–Ω–æ–ø–∫—É 'üî• –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'."
        )
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_close")
    async def close_admin(callback: CallbackQuery):
        """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        if callback.message:
            await callback.message.delete()
        await safe_callback_answer(callback)
    
    @dp.callback_query(F.data == "admin_menu")
    async def show_admin_menu(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
        user = callback.from_user
        if not user or not is_admin(user.id):
            await safe_callback_answer(callback)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_services"))
        keyboard.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
        keyboard.row(InlineKeyboardButton(text="üìù –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", callback_data="admin_post"))
        keyboard.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close"))
        
        admin_text = f"""üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Phoenix PS Bot**

‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {config.CHANNEL_ID or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                admin_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        await safe_callback_answer(callback)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
    @dp.message()
    async def handle_admin_text(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        user = message.from_user
        if not user or not is_admin(user.id):
            return
        
        user_state = admin_states.get(user.id)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not user_state:
            return
        
        if user_state == "waiting_post":
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
            if not message.text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot = message.bot
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                await bot.send_message(
                    config.CHANNEL_ID,
                    message.text,
                    reply_markup=get_channel_post_keyboard(),
                    parse_mode="Markdown"
                )
                
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                from aiogram.types import InlineKeyboardButton
                
                keyboard = InlineKeyboardBuilder()
                keyboard.row(InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))
                
                await message.answer(
                    f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {config.CHANNEL_ID}!",
                    reply_markup=keyboard.as_markup()
                )
                
                admin_states.pop(user.id, None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                admin_states.pop(user.id, None)
        
        elif user_state == "waiting_channel":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
            if not message.text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫.")
                return
            
            channel_id = message.text.strip()
            config.set_channel(channel_id)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton
            
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel_id}",
                reply_markup=keyboard.as_markup()
            )
            admin_states.pop(user.id, None)
        
        elif user_state.startswith("waiting_name_"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
            if not message.text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.")
                return
            
            category_key = user_state.split("_")[2]
            category_name = CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            service_name = message.text.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            admin_states[user.id] = f"waiting_description_{category_key}_{service_name}"
            
            await message.answer(
                f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏: {service_name}**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç –º—É—Å–æ—Ä–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏'):",
                parse_mode="Markdown"
            )
        
        elif user_state.startswith("waiting_description_"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏
            if not message.text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.")
                return
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_description_category_key_service_name
            parts = user_state.split("_", 3)  # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ 3 —á–∞—Å—Ç–∏
            if len(parts) < 4:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                admin_states.pop(user.id, None)
                return
            
            category_key = parts[2]
            service_name = parts[3]
            description = message.text.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ
            admin_states[user.id] = f"waiting_price_{category_key}_{service_name}_{description}"
            
            await message.answer(
                f"üí∞ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏: {service_name}**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1500 —Ä—É–±.' –∏–ª–∏ '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'):",
                parse_mode="Markdown"
            )
        
        elif user_state.startswith("waiting_price_"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏
            if not message.text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏.")
                return
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_price_category_key_service_name_description
            parts = user_state.split("_", 4)  # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ 4 —á–∞—Å—Ç–∏
            if len(parts) < 5:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                admin_states.pop(user.id, None)
                return
            
            category_key = parts[2]
            service_name = parts[3]
            description = parts[4]
            price = message.text.strip()
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                category_name = CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                service_id = await db.add_service(service_name, description, price, category_name)
                
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                from aiogram.types import InlineKeyboardButton
                
                keyboard = InlineKeyboardBuilder()
                keyboard.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add_service"))
                keyboard.row(InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))
                
                await message.answer(
                    f"‚úÖ **–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                    f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {service_name}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"üÜî ID: {service_id}",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                
                admin_states.pop(user.id, None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}")
                admin_states.pop(user.id, None)
    
    # –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @dp.message(Command("add_service"))
    async def cmd_add_service(message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ (—Å—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not message.text:
            return
            
        try:
            args = message.text.split(" ", 1)[1].split("|")
            
            if len(args) != 4:
                await message.answer(
                    "‚ùå –§–æ—Ä–º–∞—Ç: /add_service –∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞\n\n" +
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join([f"‚Ä¢ {cat}" for cat in CATEGORIES.values() if cat not in ["üßæ –û –Ω–∞—Å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∑–∞–∫–∞–∑"]])
                )
                return
            
            category, name, description, price = [arg.strip() for arg in args]
            
            service_id = await db.add_service(name, description, price, category)
            
            await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: {service_id}")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    @dp.message(Command("delete_service"))
    async def cmd_delete_service(message: Message):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not message.text:
            return
            
        try:
            service_id = int(message.text.split()[1])
            success = await db.delete_service(service_id)
            
            if success:
                await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ {service_id} —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —É—Å–ª—É–≥–∏: /delete_service 1")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    @dp.message(Command("list_services"))
    async def cmd_list_services(message: Message):
        """–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        services = await db.get_all_services()
        
        if not services:
            await message.answer("üì≠ –£—Å–ª—É–≥ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        text = "üìã **–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:**\n\n"
        for service in services:
            text += f"üîπ **ID {service['id']}**: {service['name']}\n"
            text += f"   üí∞ {service['price']} | üìÇ {service['category']}\n\n"
        
        await message.answer(text, parse_mode="Markdown")
    
    @dp.message(Command("set_manager"))
    async def cmd_set_manager(message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not message.text:
            return
            
        try:
            username = message.text.split(" ", 1)[1].strip().replace("@", "")
            config.set_manager(username)
            await message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{username}")
            
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /set_manager phoen1xPC")
    
    @dp.message(Command("set_channel"))
    async def cmd_set_channel(message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not message.text:
            return
            
        try:
            channel_id = message.text.split(" ", 1)[1].strip()
            config.set_channel(channel_id)
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel_id}")
            
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª: /set_channel @helprepairpc")
    
    @dp.message(Command("post"))
    async def cmd_post(message: Message):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not message.text:
            return
            
        if not config.CHANNEL_ID:
            await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        
        try:
            post_text = message.text.split(" ", 1)[1]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot = message.bot
            
            await bot.send_message(
                config.CHANNEL_ID,
                post_text,
                reply_markup=get_channel_post_keyboard(),
                parse_mode="Markdown"
            )
            
            await message.answer(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {config.CHANNEL_ID}!")
            
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /post –í–∞—à —Ç–µ–∫—Å—Ç")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    @dp.message(Command("admin_help"))
    async def cmd_admin_help(message: Message):
        """–ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        user = message.from_user
        if not user or not is_admin(user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        help_text = """üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã Phoenix PS Bot**

**–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**
‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /add_service –∫–∞—Ç–µ–≥–æ—Ä–∏—è|–Ω–∞–∑–≤–∞–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ|—Ü–µ–Ω–∞
‚Ä¢ /list_services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
‚Ä¢ /delete_service ID - —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É
‚Ä¢ /set_manager username - –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ /set_channel @channel - –∫–∞–Ω–∞–ª
‚Ä¢ /post —Ç–µ–∫—Å—Ç - –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: @{manager}
‚Ä¢ –ö–∞–Ω–∞–ª: {channel}""".format(
            manager=config.MANAGER_USERNAME or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            channel=config.CHANNEL_ID or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
        
        await message.answer(help_text, parse_mode="Markdown")